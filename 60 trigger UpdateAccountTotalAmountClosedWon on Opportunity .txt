trigger UpdateAccountTotalAmountClosedWon on Opportunity (after insert, after update, after delete, after undelete) {
   
   // Set to store Account IDs that need to be updated
   
   Set<Id> accountIdsToUpdate = new Set<Id>();

    // Collect Account IDs based on Opportunities being inserted, updated, or deleted
    
	if (Trigger.isInsert || Trigger.isUpdate || Trigger.isUndelete) {
       
	   for (Opportunity opp : Trigger.new) {
          
		  if (opp.AccountId != null && opp.StageName == 'Closed Won') {
              
			  accountIdsToUpdate.add(opp.AccountId);
            }		
        }
    }

    if (Trigger.isDelete) {
       
	   for (Opportunity opp : Trigger.old) {
          
		  if (opp.AccountId != null && opp.StageName == 'Closed Won') {
               
			   accountIdsToUpdate.add(opp.AccountId);
            }
        }
    }

    // Query to get the sum of Amount for Opportunities in "Closed Won" stage related to each Account
    
	Map<Id, Decimal> accountOpportunityAmountMap = new Map<Id, Decimal>();

    for (AggregateResult ar : [SELECT AccountId, SUM(Amount) totalAmount FROM Opportunity WHERE AccountId IN :accountIdsToUpdateAND StageName = 'Closed Won'GROUP BY AccountId]) {
        
		accountOpportunityAmountMap.put((Id)ar.get('AccountId'), (Decimal)ar.get('totalAmount'));
    }

    // List to hold Account updates
    List<Account> accountsToUpdate = new List<Account>();

    // Update the Total Amount of Opportunities field on the Account
    
	for (Id accountId : accountIdsToUpdate) {
        
		Decimal totalAmount = accountOpportunityAmountMap.containsKey(accountId) ? accountOpportunityAmountMap.get(accountId) : 0;
       
	   accountsToUpdate.add(new Account(Id = accountId,Total_Amount_Closed_Won__c = totalAmount  // Assuming the custom field is Total_Amount_Closed_Won__c));
    }

    // Update the Account records
    
	if (!accountsToUpdate.isEmpty()) {
       
	   update accountsToUpdate;
    }
}
